import java.util.ArrayList;
import java.util.HashMap;
import java.util.Scanner;
class Stock {
    String symbol;
    double price;

    public Stock(String symbol, double price) {6
        this.symbol = symbol;
        this.price = price;
    }
}

class Portfolio {
    String symbol;
    int quantity;

    public Portfolio(String symbol, int quantity) {
        this.symbol = symbol;
        this.quantity = quantity;
    }
}

public class App {
    private static HashMap<String, Stock> marketData = new HashMap<>();
    private static ArrayList<Portfolio> portfolio = new ArrayList<>();
    private static double balance = 10000.0; // Initial balance

    public static void main(String[] args) throws Exception { 
        // Sample market data
        marketData.put("AAPL", new Stock("AAPL", 150.0));
        marketData.put("GOOGL", new Stock("GOOGL", 2800.0));
        marketData.put("AMZN", new Stock("AMZN", 3500.0));
        marketData.put("TSLA", new Stock("TSLA", 720.0));

        Scanner scanner = new Scanner(System.in);
        int choice;

        do {
            System.out.println("\n--- Stock Trading Platform ---");
            System.out.println("1. View Market Data");
            System.out.println("2. Buy Stock");
            System.out.println("3. Sell Stock");
            System.out.println("4. View Portfolio");
            System.out.println("5. Exit");
            System.out.print("Enter your choice: ");
            choice = scanner.nextInt();

            switch (choice) {
                case 1:
                    viewMarketData();
                    break;
                case 2:
                    buyStock(scanner);
                    break;
                case 3:
                    sellStock(scanner);
                    break;
                case 4:
                    viewPortfolio();
                    break;
                case 5:
                    System.out.println("Thank you for using the platform!");
                    break;
                default:
                    System.out.println("Invalid choice. Please try again.");
            }
        } while (choice != 5);

        scanner.close();
    }

    // View market data
    private static void viewMarketData() {
        System.out.println("\n--- Market Data ---");
        for (String symbol : marketData.keySet()) {
            Stock stock = marketData.get(symbol);
            System.out.println("Symbol: " + stock.symbol + ", Price: $" + stock.price);
        }
    }

    // Buy stock
    private static void buyStock(Scanner scanner) {
        System.out.print("Enter stock symbol to buy: ");
        String symbol = scanner.next().toUpperCase();

        if (marketData.containsKey(symbol)) {
            Stock stock = marketData.get(symbol);
            System.out.print("Enter quantity to buy: ");
            int quantity = scanner.nextInt();
            double totalCost = stock.price * quantity;

            if (totalCost <= balance) {
                balance -= totalCost;
                addToPortfolio(symbol, quantity);
                System.out.println("You bought " + quantity + " shares of " + symbol + " for $" + totalCost);
                System.out.println("Remaining balance: $" + balance);
            } else {
                System.out.println("Insufficient balance to buy the stock.");
            }
        } else {
            System.out.println("Stock not found.");
        }
    }

    // Sell stock
    private static void sellStock(Scanner scanner) {
        System.out.print("Enter stock symbol to sell: ");
        String symbol = scanner.next().toUpperCase();

        Portfolio portfolioItem = findPortfolioItem(symbol);
        if (portfolioItem != null) {
            System.out.print("Enter quantity to sell: ");
            int quantity = scanner.nextInt();

            if (quantity <= portfolioItem.quantity) {
                Stock stock = marketData.get(symbol);
                double totalSale = stock.price * quantity;
                balance += totalSale;
                portfolioItem.quantity -= quantity;
                if (portfolioItem.quantity == 0) {
                    portfolio.remove(portfolioItem); // Remove from portfolio if no shares left
                }
                System.out.println("You sold " + quantity + " shares of " + symbol + " for $" + totalSale);
                System.out.println("New balance: $" + balance);
            } else {
                System.out.println("You don't own that many shares.");
            }
        } else {
            System.out.println("You don't own any shares of this stock.");
        }
    }

    // Add stock to portfolio
    private static void addToPortfolio(String symbol, int quantity) {
        Portfolio portfolioItem = findPortfolioItem(symbol);
        if (portfolioItem != null) {
            portfolioItem.quantity += quantity; // Add to existing stock in portfolio
        } else {
            portfolio.add(new Portfolio(symbol, quantity)); // Add new stock to portfolio
        }
    }

    // Find stock in portfolio
    private static Portfolio findPortfolioItem(String symbol) {
        for (Portfolio item : portfolio) {
            if (item.symbol.equals(symbol)) {
                return item;
            }
        }
        return null;
    }

    // View portfolio and performance
    private static void viewPortfolio() {
        System.out.println("\n--- Portfolio ---");
        if (portfolio.isEmpty()) {
            System.out.println("Your portfolio is empty.");
        } else {
            double totalValue = 0.0;
            for (Portfolio item : portfolio) {
                Stock stock = marketData.get(item.symbol);
                double stockValue = stock.price * item.quantity;
                totalValue += stockValue;
                System.out.println("Symbol: " + item.symbol + ", Quantity: " + item.quantity + ", Value: $" + stockValue);
            }
            System.out.println("Total portfolio value: $" + totalValue);
            System.out.println("Cash balance: $" + balance);
        }
    }
}

